{"version":3,"sources":["components/Card.js","components/CardList.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","height","mass","type","hair_color","skin_color","eye_color","birth_year","gender","className","src","alt","CardList","people","console","log","cardComponent","map","user","index","found","match","length","key","App","peopleFecth","url","a","fetch","resp","json","data","setState","pre","previous","next","results","state","cur","this","onClick","event","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAgBeA,G,MAbF,SAAC,GAA+E,IAA9EC,EAA6E,EAA7EA,KAAKC,EAAwE,EAAxEA,OAAOC,EAAiE,EAAjEA,KAAuDC,GAAU,EAA5DC,WAA4D,EAAjDC,WAAiD,EAAtCC,UAAsC,EAA5BC,WAA4B,EAAjBC,OAAiB,EAAVL,MAC9E,OACI,yBAAKM,UAAU,kDACX,yBAAKC,IAAG,+BAA0BV,EAA1B,mBAAyCG,EAAzC,UAAuDQ,IAAI,YACnE,yBAAKF,UAAU,MACf,oCAAUT,EAAV,MACA,sCAAYC,GACZ,oCAAUC,OC4BPU,G,MAnCE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACfC,QAAQC,IAAIF,GACZ,IAAMG,EAAgBH,EAAOI,IAAI,SAACC,EAAKC,GAEnC,IACMC,EAAQF,EAAKlB,KAAKqB,MADV,UASd,OANY,MAATD,GAAiBA,EAAME,OAAS,EAC/BJ,EAAKf,KAAO,IAEZe,EAAKf,KAAO,IAIhB,kBAAC,EAAD,CACIoB,IAAKJ,EACLnB,KAAMkB,EAAKlB,KACXC,OAAQiB,EAAKjB,OACbC,KAAMgB,EAAKhB,KACXE,WAAYc,EAAKd,WACjBC,WAAYa,EAAKb,WACjBC,UAAWY,EAAKZ,UAChBC,WAAYW,EAAKX,WACjBC,OAAQU,EAAKV,OACbL,KAAMe,EAAKf,SAInB,OACI,6BACKa,KC6BEQ,G,mBArDb,aAAc,IAAD,8BACX,+CASFC,YAVa,sCAUC,WAAOC,GAAP,iBAAAC,EAAA,qEACOC,MAAMF,GADb,cACNG,EADM,gBAEOA,EAAKC,OAFZ,OAENC,EAFM,OAGZ,EAAKC,SAAS,CAACC,IAAKF,EAAKG,WACzB,EAAKF,SAAS,CAACG,KAAKJ,EAAKI,OACzB,EAAKH,SAAS,CAACnB,OAAQkB,EAAKK,UALhB,yCAVD,sDAEX,EAAKC,MAAQ,CACXxB,OAAQ,GACRoB,IAAK,KACLK,IAAK,sCACLH,KAAM,IANG,E,iFAmBXI,KAAKd,YAAYc,KAAKF,MAAMC,O,+BAIrB,IAAD,OAaN,OACE,6BACE,yBAAK7B,UAAU,WACb,4BAAI,4BAAQA,UAAU,UAAlB,cAEN,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAUI,OAAQ0B,KAAKF,MAAMxB,UAE/B,yBAAKJ,UAAU,MACb,4BAAQ+B,QAfE,SAACC,GACM,MAAlB,EAAKJ,MAAMJ,KACZ,EAAKR,YAAY,EAAKY,MAAMJ,MAaAjC,KAAK,OAAOS,UAAU,qHAAhD,QACA,4BAAQ+B,QAtBG,SAACC,GACM,MAAnB,EAAKJ,MAAMF,MACZ,EAAKV,YAAY,EAAKY,MAAMF,OAoBCnC,KAAK,OAAOS,UAAU,qHAAjD,c,GAhDQiC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2D,OCXN0B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.139b44af.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name,height,mass,hair_color,skin_color,eye_color,birth_year,gender,type}) => {\r\n    return(\r\n        <div className=\"bg-dark-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${name}?set=set${type}&50x50`} alt=\"Profile\"/>\r\n            <div className=\"f4\">\r\n            <p>Name: {name}  </p>\r\n            <p>height: {height}</p>\r\n            <p>mass: {mass}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport { isObjectTypeIndexer } from '@babel/types';\r\nconst CardList = ({people}) => {\r\n    console.log(people);\r\n    const cardComponent = people.map((user,index) => {\r\n\r\n        const regex = /[0-9]/g;//regex of 0-9\r\n        const found = user.name.match(regex);//user name has numbers\r\n\r\n        if(found != null && found.length > 0){//not null and length > 0\r\n            user.type = \"1\";\r\n        }else{\r\n            user.type = \"2\";\r\n        }\r\n\r\n        return (\r\n        <Card \r\n            key={index}\r\n            name={user.name}\r\n            height={user.height}\r\n            mass={user.mass}\r\n            hair_color={user.hair_color}\r\n            skin_color={user.skin_color}\r\n            eye_color={user.eye_color}\r\n            birth_year={user.birth_year}\r\n            gender={user.gender}\r\n            type={user.type}\r\n        />\r\n        );\r\n    })\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport { functionTypeAnnotation } from '@babel/types';\nimport { async } from 'q';\n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      people: [],\n      pre: null,\n      cur: 'https://swapi.co/api/people/?page=1',\n      next: ''\n    }\n  }\n\n  peopleFecth = async (url) => {\n    const resp = await fetch(url)\n    const data = await resp.json();\n    this.setState({pre: data.previous});\n    this.setState({next:data.next});\n    this.setState({people: data.results});\n  }\n\n  componentDidMount(){\n    this.peopleFecth(this.state.cur);\n  }\n  \n\n  render(){\n    const nextPage = (event) =>{\n      if(this.state.next != null){\n        this.peopleFecth(this.state.next);\n      }\n    }\n\n    const prePage = (event) =>{\n      if(this.state.pre != null){\n        this.peopleFecth(this.state.pre);\n      }\n    }\n\n    return(\n      <div >\n        <div className=\"heading\">\n          <h1><strong className=\"shadow\">Starwars</strong></h1>\n        </div>\n        <div className=\"main\">\n          <CardList people={this.state.people}/>\n        </div>\n        <div className='tc'>\n          <button onClick={prePage} name=\"back\" className=\"f3 bg-yellow no-underline green bg-animate hover-bg-black hover-white inline-flex items-center pa3 ba mr4 ma3 br3\">Back</button>\n          <button onClick={nextPage} name=\"next\" className=\"f3 bg-yellow no-underline green bg-animate hover-bg-black hover-white inline-flex items-center pa3 ba mr4 ma3 br3\">Next</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}